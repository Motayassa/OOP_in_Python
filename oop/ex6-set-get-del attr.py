class Point: #атрибуты класса это имена переменных и методов
    max_coord=100
    min_coord=0
    
    def __init__(self,x,y):
        self.x=x
        self.y=y
        
    def set_coord(self,x,y):
        if self.min_coord<=x<=self.max_coord:  #чтобы обратиться к атрибуту класса внутри метода          
            self.x=x                         #нужно явно указать пространство имен класса или его экзмепляра (self)
            self.y=y
    
    def __getattribute__(self, item):   #считывание атрибута через экземпляр класса
        if item =='x':
            raise ValueError('доступ запрещен')
        else:    
            return object.__getattribute__(self,item)
    
    def __setattr__(self,key,value):  #присвоение значения атрибуту
        if key =='z':
            raise AttributeError('недопустимое имя атрибута')
        else:
            object.__setattr__(self,key,value) #вызов того же метода для базового класса
            #альтернатива self.__dict__[key]=value   # dict хранит локальные атрибуты, свойства данного экземпляра класса
                                        #обычное присвоение  self.x=value привело бы к рекурсии
                                        
    def __getattr__(self,item):  #Обращение к несуществующему атрибуту экземпляра класса
        return False  
    
    def __delattr__(self, item):  #удаление атрибута экземпляра класса
        object.__delattr__(self,item)                             
                                        
#    @classmethod
#   def set_bound(cls, left):
#        cls.min_coord=left

pt1=Point(1,2)
pt2=Point(10,20)
print(pt1.yy)
del pt1.x
print(pt1.__dict__)

#print(pt1.max_coord) #через экземпляры класса можно обращаться к атрибутам класса
#pt1.set_bound(-100)


#МАГИЧЕСКИЕ МЕТОДЫ ДЛЯ АТРИБУТОВ
#__setattr__(self,key,value)__-атоматически вызывается пр изменении свойства key класса
#ПРИСВАИВАЕТ АТТРИБУТУ КАКОЕ-ЛИБО ЗНАЧЕНИЕ
#может помочь запрещать создание каких-либо локальных атрибутов
#self-ссылка на класс  key-имя атрибута  value-значение которое присваимвается атрибуту

#__getattribute__(self,item)-автоматически вызывается при получении свойства класса с именем  item;
#ВОЗВРАЩАЕТ ЗНАЧЕНИЕ АТРИБУТА КЛАССА К КОТОРОМУ МЫ ОБРАЩАЕМСЯ ЧЕРЕЗ ЭКЗЕМПЛЯР КЛАССА
#Может помочь в настройке обращения к конкретным атрибутам, напрмер запрет
#self-ссылка на класс  item-объект к которому обращаются

#__getattr__(self,item)-автоматически вызывается при получении несуществующего свойства item класса
#позволяет более тонко настраивать обращения к атрибутам экземпляров класса, настройка генерации исключений
#self-ссылка на класс  item-несуществующий объект к которому обращаются

#__delattr__(self,item)-автоматически вызывается при удалении свойства item (не важно:существует оно или нет)
#УДАЛЯЕТ АТРИБУТ ЭКЗЕМПЛЯРА КЛАССА
#self-ссылка на класс  item-удаляемый объект атрибут экземпляра класса
#Необходим для контроля удаления атрибутов экземпляра класса

