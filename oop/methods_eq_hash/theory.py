hash(123)
hash("Python")
hash((1, 2, 3))


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __hash__(self):  # свой способ вычисления хэша
        #  объектов через магический метод
        return hash((self.x, self.y))
        # tо есть, мы подменили вычисление хэша объекта класса Point
        # на вычисление хэша от координат точки. Теперь, после
        # запуска программы видим, что объекты равны и их хэши также равны.


p1 = Point(1, 2)
p2 = Point(1, 2)
# Обратите внимание, несмотря на то, что координаты точек p1 и p2 равны,
# их хэши разные. То есть, с точки зрения функции hash() –
# это два разных объекта.
print(hash(p1), hash(p2), sep='\n')
print(p1 == p2)  # Если оператор сравнения дает True,
# то объекты равны, иначе – не равны.
d = {}
d[p1] = 1
d[p2] = 2
print(d)
# если взять пустой словарь: d = {}
# А, затем, сформировать записи через объекты p1 и p2:
# то они будут восприниматься как один и тот же ключ,
# так как объекты равны и их хэши тоже равны.